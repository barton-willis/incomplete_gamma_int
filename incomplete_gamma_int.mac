/*
  Barton Willis
  Maxima code for integration of some functions whose antiderivative involves 
  either the incomplete gamma function or the Gauss hypergeometric function.

 License: CC0 1.0 Universal (https://creativecommons.org/publicdomain/zero/1.0/) */

load(ratpow);
load(unwind_protect);
load(appell);

/* Apply the function `extra_simp' to each antiderivative found by `my_int`.  The default is the 
   identity function.*/
extra_simp : lambda([e], e);

my_int(e,x) := block([antid : false, methods],
  methods : ['additive_int, 'log_int, 'power_int, 'incomplete_gamma_int, 'hypergeometric_int, 'appell_int],
  for fn in methods while antid = false do (
    antid : fn(e,x)),
  extra_simp(antid));
  
/* Factor eq, replace factors of the form X^n by X and nonvanishing factors by 1. The second argument
   'fcts' should be a list of facts that can be assumed, for example notequal(p,0). This function
   creates a super context, assumes the facts, and then kills the new context. */
equation_reduce(eq,fcts) := block([inflag : true, cntx : supcontext()],
  unwind_protect(
     (map('assume, fcts),
      eq : factor(eq),
      eq : if safe_op(eq) = "*" then args(eq) else [eq],
      eq : map(lambda([s], if safe_op(s) = "^" then first(s) else s), eq),
      eq : map(lambda([s], if member(csign(s),['neg, 'pn, 'pos]) then 1 else s), eq),
      xreduce("*",eq)),
  killcontext(cntx)));

/* Factor followed by simplification. Why? Because factor(-2) = -1 * 2 and that makes
   integerp(factor(-2)) = false. */
sfactor(e) := expand(factor(e),0,0);

/* Return solve(e,x) in an environment with programmode : true, ..., and globalsolve : false. 
 
   We help 'solve' by immediately returning an empty list when the equation list contains a 
   nonzero numeric member. This trap speeds up some integrals.*/
solve_special_environment(e,x) := block([programmode : true, backsubst : true, realonly : false,
 breakup : false, solveexplicit : true, solvenullwarn : false, solvefactors : true, solveradcan : true,
 solvetrigwarn : false, solvedecomposes : true, globalsolve : false, algexact : true],

   if some(lambda([s], numberp(s) and s # 0),e) then (
     [])
   else (
     solve(delete(0,e),x)))$

/* When 'e' is a mapatom, return false; otherwise return op(e) with inflag set to true.*/
safe_op(e) := block([inflag : true], if mapatom(e) then false else op(e));

/*Return the logarithmic derivative of the expression 'e' with respect to the variable 'x'.
  Of course, 'x' should be a non constant mapatom, but this function doesn't check that for
  that. */
logdiff(e,x) := diff(e,x)/e;

/* For a rational function 'r' in the variable 'x', return the degree of the 
denominator minus the degree of the numerator. This function does not check that
the input 'r' is rational in 'x'. */
pole_order(r,x) := hipow(ratexpand(ratdenom(r)),x) - hipow(ratexpand(ratnumer(r)),x);

/* Return a Maxima list of the first `m` digits of the base 'base' representation 
of the integer `n`. This function does not check that both `n` & `m` are positive 
integers. */
digits(n,m,base) := block([d : []],
        for k : 1 thru m do (
            n : divide(n,base),
            push(second(n),d),
            n : first(n)),
       d);

additive_int(e,x) := block([inflag : true,ek, OK : true, I : 0],
  if safe_op(e) = "+" then (
    for ek in e while OK = true do (
      ek : my_int(ek,x),
      OK : is(ek # false),
      I : ek + I),
    if OK = false then false else I)
  elseif freeof(x,e) then (
    e*x)
  else (
    false));

log_int(e,x) := block([α],
  α : diff(ratdenom(e),x)/ratnumer(e),
  α : block([rootsconmode : 'all], ratsimp(rootscontract(α))),
  if freeof(x, α) and askequal(0, α) = 'no then (
    log(ratdenom(e))/α)
  else (
    false));

/* This function attempts to find a change of variable to convert the integrand
'e' to the form integrate(x^a * exp(-x), x) = -gamma_incomplete(1+a,x). This
method will be successful when the derivative change of variables is a product
of powers of the factors of the logarithmic derivative of the integrand 'e'. */
incomplete_gamma_int(e,x) := block([sigma, mu, kerns, n, N, resfn, a : gensym(),
   de, eqs, sol, α, f, k : 1, antid : false, errormsg : false],
   sigma : partfrac(gfactor(ratsimp(logdiff(e,x))),x),
   kerns : if safe_op(sigma) = "+" then args(sigma) else [sigma],
   kerns : sublist(kerns, lambda([s], pole_order(s,x) = 1)),
   resfn : lambda([z,k], if k = 0 then 0 else (z - logdiff(1/ratdenom(z),x))/(a+1)),
   n : length(kerns),
   N : 2^n,

   while  k <= N and (antid = false) do (
      mu : xreduce("+", map(resfn, kerns, digits(k,n,2))),
      k : k + 1,
      de : mu^2 *(diff(sigma,x) - mu*sigma + (a + 1) * mu^2) + mu*(mu-sigma)*diff(mu,x) - 
           mu*diff(mu,x,2) + 2*diff(mu,x)^2,      
      eqs : ratp_dense_coeffs(de,x),
      eqs : map(lambda([s], equation_reduce(s,[notequal(a+1,0)])),eqs),
      sol : solve_special_environment(eqs,[a]),
      if sol # [] and sol # 'all then (     
        sol : first(sol),
        f : -(sigma/mu)+diff(mu,x,1)/mu^2+a+1,
        f : errcatch(ratsimp(subst(sol, f))),
        if f # [] then (
          f : first(f),
          α : subst(sol, ratsimp(e / (diff(f,x) * f^a * exp(-f)))), 
          α : block([rootsconmode : 'all], ratsimp(rootscontract(α))),
          /* This should be improved to allow things like abs(x)/x to pass. */
          if not freeof(x,radcan(α)) then (
              print("unable to show that ",α," is piecewise constant"))
          else (
            antid : factor(-α * gamma_incomplete(subst(sol,a+1),f)))))),
   antid);

/* seed for integrate(α x^a * (1-x)^b,x) */
hypergeometric_int(e,x) := block([sigma, mu, kerns, n, N, resfn, a : gensym(), b : gensym(),
   de, eqs, sol, solx, α, f, k : 1, αα, aa, bb, ff, fff, antid : false, errormsg : false, bts, fcts : []],

   sigma : partfrac(gfactor(logdiff(e,x)),x),
   kerns : if safe_op(sigma) = "+" then args(sigma) else [sigma],
   kerns : sublist(kerns, lambda([s], pole_order(s,x) = 1)),
   resfn : lambda([z,k], z : ratsimp(z - logdiff(z,x)), if k = 0 then 0 elseif k = 1 then z/(a+1) else z/(1+a+b)),

   n : length(kerns),
   N : 3^n,
   while  k <= N and (antid = false) do (
      bts : digits(k,n,3),
      mu : xreduce("+", map(resfn, kerns, bts)),

      fcts : [],
      if member(1,bts) then push(notequal(a+1,0), fcts),
      if member(2,bts) then push(notequal(a+b+1,0), fcts),

      k : k + 1,
      
      de : b*(mu^2*(diff(sigma,x,1))-mu*(diff(mu,x,1))*sigma-mu*(diff(mu,x,2))+
           2*(diff(mu,x,1))^2)+(mu*sigma-diff(mu,x,1)-a*mu^2-mu^2)*
           (mu*sigma-diff(mu,x,1)-b*mu^2-a*mu^2-mu^2),

      eqs : ratp_dense_coeffs(ratnumer(de),x),
      eqs : map(lambda([s], equation_reduce(s, fcts)), eqs),
      /* eqs : quotify(eqs,'a, 'b), */
      sol : solve_special_environment(eqs,[a,b]),

      if sol # [] and sol # 'all then (   

        f : [],
        while sol # [ ] and f = [] do (
          solx : pop(sol),
          f : (mu*sigma-diff(mu,x,1)+(-a-1)*mu^2)/(mu*sigma-diff(mu,x,1)+(-b-a-1)*mu^2),       
          f : errcatch(ratsimp(subst(solx, f)))),
      
        sol : solx,

        if f # [] then (
          f : first(f),
          α : subst(sol, ratsimp(e / (diff(f,x) * f^a * (1-f)^b))), 
          α : block([rootsconmode : 'all], ratsimp(rootscontract(α))),
          /* This should be improved to allow things like abs(x)/x to pass. */
          if not freeof(x,radcan(α)) then (
              print("unable to show that ",α," is piecewise constant"))
          else (
            [αα,aa,bb,ff] : map('sfactor, subst(sol, [α,a,b,f])),
            ff : scanmap('sfactor,ff),
            αα : scanmap('sfactor, αα),
            /* Maybe optionally apply hypergeometric_simp?*/  
            if integerp(aa) and ((1+aa = 0) or (2+aa <= 0)) then (
              antid : false)
            else (
              antid : factor(αα * ff^(1+aa) * hypergeometric([1+aa, -bb], [2+aa], ff)/(1+aa))))))),
   antid);

/* seed integrate(α x^a,x) */
power_int(e,x) := block([α, sigma, mu, kerns, n, N, resfn, de, eqs, f, k : 1, antid : false, errormsg : false],

   sigma : partfrac(gfactor(logdiff(e,x)),x),
   kerns : if safe_op(sigma) = "+" then args(sigma) else [sigma],
   kerns : sublist(kerns, lambda([s], pole_order(s,x) = 1)),
   resfn : lambda([z,k], if k = 0 then 0 else z - logdiff(z,x)),
   n : length(kerns),
   N : 2^n,
   while  k <= N and (antid = false) do (
      mu : xreduce("+", map(resfn, kerns, digits(k,n,2))),
      k : k + 1,      
      de : -(mu*sigma)+diff(mu,x,1)+mu^2,
      if equal(de,0) then (   
        f : factor(exp(integrate(mu,x))),  
        if mu # 0 then (
           α : ratsimp(e / diff(f,x)), 
           α : block([rootsconmode : 'all], ratsimp(rootscontract(α))),
           /* This should be improved to allow things like abs(x)/x to pass. */
           if not freeof(x,radcan(α)) then (
              print("unable to show that ",α," is piecewise constant"))
           else (
             antid : factor(α * f))))),         
   antid);

/* seed: integrate(α x^a (1-x)^b (1-τ x)^c,x) */
appell_int(e,x) := block([sigma, mu, kerns, n, N, resfn, a : gensym(), b : gensym(),
   c : gensym(), de, eqs, sol, solx, α, f, k : 1, αα, aa, bb, ff, fff, antid : false, errormsg : false, bts, 
   fcts : [],P0,P1,P2,cc, τ,ττ],

   sigma : partfrac(gfactor(logdiff(e,x)),x),
   kerns : if safe_op(sigma) = "+" then args(sigma) else [sigma],
   kerns : sublist(kerns, lambda([s], pole_order(s,x) = 1)),
   resfn : lambda([z,k], z : ratsimp(z - logdiff(z,x)), if k = 0 then 0 elseif k = 1 then z/(a+1) else z/(1+a+b+c)),

   n : length(kerns),
   N : 3^n,
   while  k <= N and (antid = false) do (
      bts : digits(k,n,3),
      mu : xreduce("+", map(resfn, kerns, bts)),

      fcts : [],
      if member(1,bts) then push(notequal(a+1,0), fcts),
      if member(2,bts) then push(notequal(a+b+c+1,0), fcts),
      push(notequal(τ,0),fcts),
      push(notequal(τ-1,0),fcts),
      k : k + 1,

      P0 : -(mu*sigma)+diff(mu,x,1)+(a+1)*mu^2,
      P1 : (mu*sigma-diff(mu,x,1)+(-c-a-1)*mu^2)*τ+mu*sigma-diff(mu,x,1)+(-b-a-1)*mu^2,
      P2 : (-(mu*sigma)+diff(mu,x,1)+(c+b+a+1)*mu^2)*τ,

      de : P0^2*(2*P2*mu+diff(P2,x,1))^2-P0*(P1^2*P2*mu^2+P1^2*(diff(P2,x,1))*mu
           +4*(diff(P0,x,1))*P2^2*mu+2*(diff(P0,x,1))*P2*(diff(P2,x,1))
           +P1*(diff(P1,x,1))*(diff(P2,x,1))-(diff(P1,x,1))^2*P2)+(diff(P0,x,1))*(P1^2*P2*mu
           +P1^2*(diff(P2,x,1))+(diff(P0,x,1))*P2^2-P1*(diff(P1,x,1))*P2),
      
      eqs : ratp_dense_coeffs(ratnumer(de),x),
      eqs : map(lambda([s], equation_reduce(s, fcts)), eqs),
      sol : solve_special_environment(eqs,[a,b,c,τ]),
      if sol # [] and sol # 'all then (   

        f : [],
        while sol # [ ] and f = [] do (
          solx : pop(sol),
          fff : solve(subst(solx, P0 + P1*fff + P2*fff^2),fff), 
          f : errcatch(ratsimp(subst(solx, fff)))),

        sol : solx,
        if f # [] then (
          f : rhs(first(first(f))),

          α : subst(sol, ratsimp(e/(diff(f,x) * f^a * (1-f)^b * (1 - τ*f)^c))), 
          α : block([rootsconmode : 'all], ratsimp(rootscontract(α))),
          /* This should be improved to allow things like abs(x)/x to pass. */
          if not freeof(x,radcan(α)) then (
              print("unable to show that ",α," is piecewise constant"))
          else (
            [αα,aa,bb,cc, ττ, ff] : subst(sol, [α,a,b,c,τ,f]),
            if 1 + aa # 0 then (
               antid : αα * ff^(1+aa)*appell_f1(1+aa,-bb,-cc,aa+2,ff, ττ*ff)/(aa+1))
            elseif bb + aa # 0 then (
               antid : αα * (ττ^cc*(-ff^(cc+bb)))*appell_f1(-bb-aa,-bb,-cc,1-bb-cc,1/ff, 1/(ττ*ff))/(bb+cc)))))),
   antid);